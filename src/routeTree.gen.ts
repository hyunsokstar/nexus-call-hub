/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StatisticsRouteImport } from './routes/statistics'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LauncherRouteImport } from './routes/launcher'
import { Route as DashboardRouteImport } from './routes/dashboard'

const StatisticsRoute = StatisticsRouteImport.update({
  id: '/statistics',
  path: '/statistics',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LauncherRoute = LauncherRouteImport.update({
  id: '/launcher',
  path: '/launcher',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardRoute
  '/launcher': typeof LauncherRoute
  '/settings': typeof SettingsRoute
  '/statistics': typeof StatisticsRoute
}
export interface FileRoutesByTo {
  '/dashboard': typeof DashboardRoute
  '/launcher': typeof LauncherRoute
  '/settings': typeof SettingsRoute
  '/statistics': typeof StatisticsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/dashboard': typeof DashboardRoute
  '/launcher': typeof LauncherRoute
  '/settings': typeof SettingsRoute
  '/statistics': typeof StatisticsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dashboard' | '/launcher' | '/settings' | '/statistics'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard' | '/launcher' | '/settings' | '/statistics'
  id: '__root__' | '/dashboard' | '/launcher' | '/settings' | '/statistics'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRoute
  LauncherRoute: typeof LauncherRoute
  SettingsRoute: typeof SettingsRoute
  StatisticsRoute: typeof StatisticsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/statistics': {
      id: '/statistics'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof StatisticsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/launcher': {
      id: '/launcher'
      path: '/launcher'
      fullPath: '/launcher'
      preLoaderRoute: typeof LauncherRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRoute,
  LauncherRoute: LauncherRoute,
  SettingsRoute: SettingsRoute,
  StatisticsRoute: StatisticsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
